---
import BaseLayout from '@layouts/BaseLayout.astro'
import TagButton from '@components/PolyMorphicElement.astro'
import TagIcon from '@components/TagIcon.astro'
import { getCollection } from 'astro:content'

const allPosts = await getCollection('posts')

const tagCounts: Record<string, number> = {}

allPosts.forEach((post) =>
    (post.data.tags || []).forEach((tag: string) => {
        tagCounts[tag] = (tagCounts[tag] || 0) + 1
    }),
)

const tags = [...new Set(allPosts.map((post) => post.data.tags).flat())]

// const tags = Object.keys(tagCounts)
---

<BaseLayout pageTitle="Tag Index">
   <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Impedit accusantium voluptates exercitationem est aperiam, aliquid veniam, eveniet labore, laudantium dolores pariatur aut beatae incidunt. Perspiciatis exercitationem debitis quas alias magnam.</p>
   <ul class="tags" transition:animate="slide">
        {
            tags.map((tag) => (
                <li class:list={['button-class']}>
                    <TagButton as="a" href={`/tags/${tag}`}>
                        <span class="icon-class">
                            {' '}
                            <TagIcon />
                            {`${tag}-${tagCounts[tag]}`}
                        </span>
                    </TagButton>
                </li>
            ))
        }
    </ul>
</BaseLayout>

<style>
     p {
        color: red;
    }
    .tags {
        display: grid;
        grid: 100px / repeat(2, 1fr 3fr);
        grid-gap: 10px;
        & li {
            list-style: none;
        }
    }
    .no-wrap {
        display: grid;
        grid-template-columns: auto 1fr;
        grid-template-rows: auto;
    }

    .icon-class {
        display: flex;
        justify-content: space-around;
        column-gap: var(--size-6);
    }

    .button-class {
        /* white-space: nowrap; */

        font-size: var(--font-size-1);
        font-weight: var(--font-weight-3);

        /* padding-inline: var(--size-6);
        padding-block: var(--size-3); */

        color: var(--blue-9);


        &:is(:hover, :focus) {
            cursor: pointer;
            color: var(--blue-0);
            background-color: var(--blue-5);

            @nest .light & {
                text-shadow: 0 1px 0 var(--blue-8);
            }
        }

        &:active:not(:focus-visible) {
            position: relative;
            /*     inset-block-start: 2px; */
        }
    }
</style>
