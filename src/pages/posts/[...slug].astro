---
import MarkdownPostLayout from '@layouts/MarkdownPostLayout.astro';
import { type CollectionEntry, getCollection } from 'astro:content';
import { type BlogSchemaType, blogSchema } from '../../schemas.ts';
import { Image } from 'astro:assets';

interface Props {
  blogPost: CollectionEntry<'blog'>;
}

export const getStaticPaths = async () => {
  const _posts = await getCollection('blog');

  const arr = _posts.map((blogPost: CollectionEntry<'blog'>) => {
    const result = blogSchema.safeParse(_posts);
    if (!result.success) {
      // handle error then return
      result.error;
    }
    return {
      params: { slug: blogPost.slug },
      props: { blogPost },
    };
  });
  return arr;
};

const { blogPost } = Astro.props;
const { data } = blogPost;

const { description, title, author, cover, tags, pubDate } = data;

const { Content } = await blogPost.render();

// const getRatio = () => (screen.width > 768 ? '16:9' : '1:4');
---

<MarkdownPostLayout
  title={title}
  description={description}
  authorId={author.id}
  tags={tags}
  pubDate={pubDate}
>
  <div class="frame" slot="banner">
    <Image src={cover.url} alt={cover.alt} width="1500" height="300" />
  </div>

  <Content slot="main" />
</MarkdownPostLayout>

<style>
  @custom-media --md-n-below (max-width: 768px);

  .frame {
    --n: 16;
    --d: 9;
    aspect-ratio: var(--n) / var(--d);
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    @media (--md-n-below) {
      --n: 1;
      --d: 4;
    }
  }

  .frame > img,
  .frame > video {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
  }
</style>
