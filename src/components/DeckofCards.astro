---
import { format } from 'date-fns';
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import { Box, Stack, Frame, Cluster } from '@cc/index.js';

import Card from '@components/Card.astro';
import { Image } from 'astro:assets';
// import { clearCachedFetchImplementation } from '@sentry/browser/types/transports/utils';

interface Props {
  publishsedPosts: CollectionEntry<'blog'>[];
}

const { publishsedPosts } = Astro.props;

// interface PostWithAuthorInt {
//   title: string;
//   authName: string;
//   pubDate: Date;
//   slug: string;
//   cover: { url: string; alt: string };
//   desc: string;
// }

const getDecoratedPosts = async (_posts: CollectionEntry<'blog'>[]) =>
  await Promise.all(
    _posts.map(async (p) => {
      const { data } = p;
      const { author, title, pubDate, cover, description } = data;

      const name = await getEntry('authors', author.id)
        .then((obj) => obj.data.name)
        .catch((e) => {
          console.error(e);
          return 'unknown author';
        });

      return {
        title,
        authName: name,
        pubDate,
        slug: p.slug,
        cover,
        description,
      };
    }),
  )
    .then((res) => res)
    .catch((e: Error) => {
      console.error(e.message);
      return [];
    });

const decoratedPost = await getDecoratedPosts(publishsedPosts);
---

<Stack space="var(--s1)">
  {
    decoratedPost.map(({ pubDate, slug, title, description, cover }) => (
      <Card href={'/posts/' + slug}>
        <Cluster justify="space-between" align="baseline" slot="headline">
          <Box padding="0" borderWidth="0">
            <h3 class="truncate">{title}</h3>
          </Box>

          <Box padding="0" borderWidth="0">
            {format(pubDate, 'MMMM dd, yyyy')}{' '}
          </Box>
        </Cluster>

        <Box padding="0" slot="pic">
          <Frame ratio="4:3">
            <Image src={cover.url} alt={cover.alt} width="1200" height="300" />
          </Frame>
        </Box>

        <h4 class="truncate" slot="bottom">
          {description}
        </h4>
      </Card>
    ))
  }
</Stack>

<style>
  .cardPadding {
    padding-inline: var(--s2);
    font-weight: var(--font-weight-8);
  }

  .truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .description {
    font-size: 'var(--font-size-2)';
  }
</style>
