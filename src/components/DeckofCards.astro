---
import { format } from 'date-fns';
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import {  Stack,  Frame } from '@cc/index.js';

import Card from '@components/Card.astro';
import { Image } from 'astro:assets';
// import { clearCachedFetchImplementation } from '@sentry/browser/types/transports/utils';

interface Props {
  posts: CollectionEntry<'blog'>[];
}

const { posts } = Astro.props;

// interface PostWithAuthorInt {
//   title: string;
//   authName: string;
//   pubDate: Date;
//   slug: string;
//   cover: { url: string; alt: string };
//   desc: string;
// }

const getDecoratedPosts = async (_posts: CollectionEntry<'blog'>[]) =>
  await Promise.all(
    _posts.map(async (p) => {
      const { data } = p;
      const { author } = data;

      const authorObj = await getEntry('authors', author.id);

      return {
        title: data.title,
        authName: authorObj.data.name,
        pubDate: data.pubDate,
        slug: p.slug,
        cover: data.cover,
        desc: data.description,
      };
    }),
  );

const decoratedPost = await getDecoratedPosts(posts);
---

<Stack space="var(--s1)" recursive>
  {
    decoratedPost.map(({ pubDate, slug, title, desc, cover }) => (
      <Card href={'/posts/' + slug}>
        <div>
          <p>{format(pubDate, 'MMMM dd, yyyy')}</p>
        </div>

        <Frame ratio="4:3">
          <Image src={cover.url} alt={cover.alt} width="1500" height="643" />
        </Frame>

        <div>
          <h3 class="title">{title}</h3>
          <p class="truncate">{desc}</p>
        </div>
      </Card>
    ))
  }
</Stack>

<style>
  p {
    font-size: var(--font-size-1);
    font-weight: var(--font-weight-2);
  }
  .truncate {
    flex-grow: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .title {
    flex-grow: 1;
  }
</style>
