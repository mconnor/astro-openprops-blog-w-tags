---
import type { HTMLAttributes } from 'astro/types';
import { Center, Icon } from '@cc/index.js';

type Props = HTMLAttributes<'a'>;

const path = Astro.url.pathname;
const { href, ...props } = Astro.props;
const isActive = href === path || href === path.replace(/\/$/, '');
---

<a href={href} class:list={['button', { disabled: isActive }]} {...props}
  ><slot /></a
>

<!-- <a href={href} class:list={[{ current: isActive }]} {...props}><slot /></a> -->

<style>
  .button.disabled {
    cursor: not-allowed;
    color: var(--gray-5);
    border-color: var(--gray-3);
  }

  .button {
    display: inline-flex;
    white-space: nowrap;

    font-size: var(--s0);
    font-weight: var(--font-weight-7);

    padding-inline: var(--size-4);
    padding-block: var(--size-2);

    color: var(--brand);
    border: var(--border-size-2) solid var(--blue-5);
    background-color: transparent;
    border-radius: var(--radius-2);

    .dark {
      border-color: var(--blue-3);
      color: var(--blue-1);

      &:hover {
        background-color: var(--blue-3);
        color: black;
      }
    }

    &:is(:hover, :focus) {
      cursor: pointer;
      color: var(--blue-0);
      background-color: var(--blue-5);

      .light & {
        text-shadow: 0 1px 0 var(--blue-8);
      }
    }

    &:active:not(:focus-visible) {
      position: relative;
      /*     inset-block-start: 2px; */
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    .button:focus {
      transition: outline-offset 0.25s ease;
    }
    .button:focus:not(:active) {
      outline-offset: 5px;
    }
  }

  html {
    block-size: 100%;
  }

  body {
    min-block-size: 100%;
    display: grid;
    margin: 0;
  }

  section {
    display: grid;
    place-content: center;

    &.light {
      background-color: var(--gray-0);
    }

    &.dark {
      background-color: var(--gray-9);
    }
  }
</style>
