---
// import 'open-props/postcss/style';
// import 'open-props/postcss/buttons';
// import 'open-props/postcss/normalize';
// import './utility-classes.css';
// import './theme-props.css';
// import './modular-scale.css';
// import './EveryLayout.css';
---

<style is:global>
  @import url('open-props/postcss/buttons') layer(design.extras);
  @import url('open-props/postcss/normalize') layer(design.reset);

  @layer design, modular, theme, utilities, layout;

  @layer design {
    @layer system, extras, reset;
  }

  @layer modular {
    :root {
      --measure: 60ch;
      --ratio: 1.61803398875;
      --font-size-base: 1rem;

      --s0: var(--font-size-base);
      --s000: calc(var(--s0) * pow(var(--ratio), -3));
      --s00: calc(var(--s0) * pow(var(--ratio), -2));
      --s1: calc(var(--s0) * pow(var(--ratio), 1));
      --s2: calc(var(--s0) * pow(var(--ratio), 2));

      --s3: calc(var(--s0) * pow(var(--ratio), 3));
      --s4: calc(var(--s0) * pow(var(--ratio), 4));
      --s5: calc(var(--s0) * pow(var(--ratio), 5));
      --s6: calc(var(--s0) * pow(var(--ratio), 6));
      --s7: calc(var(--s0) * pow(var(--ratio), 7));
      --s8: calc(var(--s0) * pow(var(--ratio), 8));

      --h0: 10;
      --h1: calc(80vh / var(--h0) * pow(var(--ratio), 1));
      --h2: calc(80vh / var(--h0) * pow(var(--ratio), 2));
      --h3: calc(80vh / var(--h0) * pow(var(--ratio), 3));
      --h4: calc(80vh / var(--h0) * pow(var(--ratio), 4));
      --h5: calc(80vh / var(--h0) * pow(var(--ratio), 5));

      --line-height: var(--ratio);
      --border-thin: var(--border-size-1);

      --font-size-biggish: var(--s1);
      --font-size-big: var(--s2);
    }
  }
  @layer utility {
    .surface1 {
      background-color: var(--surface-1);
      color: var(--text-2);
    }

    .surface2 {
      background-color: var(--surface-2);
      color: var(--text-2);
    }

    .surface3 {
      background-color: var(--surface-3);
      color: var(--text-3);
    }

    .surface4 {
      background-color: var(--surface-4);
      color: var(--text-4);
    }

    .text1 {
      color: var(--text-1);
    }

    .text2 {
      color: var(--text-2);
    }

    .brand {
      color: var(--brand);
      background-color: var(--brand);
    }

    .link {
      color: var(--link);
      background-color: var(--link);
    }

    .link-visited {
      color: var(--link-visited);
      background-color: var(--link-visited);
    }
  }
  @layer theme {
    :where(html) {
      color-scheme: light dark;
      /* light */
      --brand-light: var(--orange-6);

      --text-1-light: var(--gray-12);
      --text-2-light: var(--gray-11);

      --surface-1-light: var(--gray-0);
      --surface-2-light: var(--gray-1);
      --surface-3-light: var(--gray-2);
      --surface-4-light: var(--gray-3);
      --surface-shadow-light: var(--gray-8-hsl);
      --shadow-strength-light: 2%;

      /* dark */
      --brand-dark: var(--orange-3);

      --text-1-dark: var(--gray-1);
      --text-2-dark: var(--gray-3);

      --surface-1-dark: var(--gray-12);
      --surface-2-dark: var(--gray-11);
      --surface-3-dark: var(--gray-10);
      --surface-4-dark: var(--gray-9);
      --surface-shadow-dark: var(--gray-12-hsl);
      --shadow-strength-dark: 80%;

      /* set defaults */
      --brand: var(--brand-light);
      --text-1: var(--text-1-light);
      --text-2: var(--text-2-light);
      --surface-1: var(--surface-1-light);
      --surface-2: var(--surface-2-light);
      --surface-3: var(--surface-3-light);
      --surface-4: var(--surface-4-light);
      --surface-shadow: var(--surface-shadow-light);
      --shadow-strength: var(--shadow-strength-light);
    }

    @media (prefers-color-scheme: dark) {
      :where(html) {
        --brand: var(--brand-dark);

        --text-1: var(--text-1-dark);
        --text-2: var(--text-2-dark);

        --surface-1: var(--surface-1-dark);
        --surface-2: var(--surface-2-dark);
        --surface-3: var(--surface-3-dark);
        --surface-4: var(--surface-4-dark);
        --surface-shadow: var(--surface-shadow-dark);
        --shadow-strength: var(--shadow-strength-dark);
      }
    }

    @media (prefers-color-scheme: light) {
      :where(html) {
        --brand: var(--brand-light);
        --text-1: var(--text-1-light);
        --text-2: var(--text-2-light);
        --surface-1: var(--surface-1-light);
        --surface-2: var(--surface-2-light);
        --surface-3: var(--surface-3-light);
        --surface-4: var(--surface-4-light);
        --surface-shadow: var(--surface-shadow-light);
        --shadow-strength: var(--shadow-strength-light);
      }
    }
  }
  @layer layout {
    /* Layouts */

    [class^='stack'] > * {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      /* top and bottom margins in horizontal-tb writing mode */
      margin-block: 0;
    }

    .stack {
      > * + * {
        margin-block-start: var(--size-5);
      }
      /* p elements after the second element towards the bottom of the space. */
      /* > :nth-child(2) {
        margin-block-end: auto;
    } */
    }

    .stack-large > * + * {
      margin-block-start: var(--size-10);
    }

    .stack-small > * + * {
      margin-block-start: var(--size-2);
    }

    /* end stack */

    [class^='box'] {
      color: var(--text-1);
      background-color: var(--surface-4);

      /* outline: 0.125rem solid transparent;
        outline-offset: -0.125rem; */

      * {
        color: inherit;
        background-color: inherit;
      }
    }

    [class^='box'].invert {
      filter: invert(100%);
    }

    .box {
      padding: var(--s0);
      border-width: var(--border-size-1);
      border-color: var(--border-color);
    }
    .box-no-border {
      outline: var(--size-0) solid transparent;
      outline-offset: (calc * var(--size-0));
    }
    .center {
      /* measurement of the content is critica */
      box-sizing: content-box;
      margin-inline: auto;
      max-inline-size: var(--measure);
      /* text align center */
      /* text-align: center;
        max-inline-size: var(--measure); */
      /* Intrinsic centering?
        Whether to center and child elements narrower than the max value */

      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .cluster {
      display: flex;
      flex-wrap: wrap;
      row-gap: var(--space, var(--size-2));
      column-gap: var(--space, var(--size-fluid-5));
      justify-content: space-between;
      align-items: center;
    }

    /* COVER */

    .switcher {
      display: flex;
      flex-wrap: wrap;
      gap: var(--size-5);
      --threshold: var(--size-15);

      > * {
        flex-grow: 1;
        flex-basis: calc((var(--threshold) - 100%) * 999);
      }
    }

    .switcher > :nth-last-child(n + 6),
    .switcher > :nth-last-child(n + 6) ~ * {
      flex-basis: 100%;
    }

    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border-width: 0;
    }

    .imposter {
      /* ↓ Position the top left corner in the center */
      position: var(--positioning, absolute);
      inset-block-start: 50%;
      inset-inline-start: 50%;
      /* ↓ Reposition so the center of the element
  is the center of the positioning container */
      transform: translate(-50%, -50%);
    }
  }

  .gradient-text {
    background: var(--gradient-1);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
</style>
